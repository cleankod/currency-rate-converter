plugins {
    id 'org.springframework.boot' version '3.0.0-M2'
    id 'java'
    id 'groovy'
    id 'jacoco'
}
apply from: 'version.gradle'
group = 'pl.cleankod'
version = loadVersion().getVersion()
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.7'

    implementation 'com.netflix.hystrix:hystrix-core:1.5.18'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
    implementation 'io.github.openfeign:feign-httpclient:11.8'
    implementation 'io.github.openfeign:feign-jackson:11.8'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy:3.0.10'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'

    testImplementation 'org.apache.httpcomponents:httpclient:4.5.13'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.33.0'


}

test {
    useJUnitPlatform()
    systemProperties([
            // Configuration parameters to execute top-level classes in parallel but methods in same thread
            'junit.jupiter.execution.parallel.enabled'             : 'true',
            'junit.jupiter.execution.parallel.mode.default'        : 'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default': 'concurrent',
    ])
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('JacocoReports')
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
}

task printVersion {
    println project.version
}

